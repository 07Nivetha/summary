import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import pdfParse from 'pdf-parse';
import { Buffer } from 'buffer';

// Enable Buffer in Next.js
Buffer.from('');

export async function POST(request: NextRequest) {
  try {
    // Get environment variables
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      throw new Error("OPENAI_API_KEY environment variable is missing");
    }

    const { pdfUrl } = await request.json();
    if (!pdfUrl) throw new Error('PDF URL is required');

    console.log('Fetching PDF from:', pdfUrl);
    const response = await fetch(pdfUrl);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch PDF: ${response.statusText}`);
    }
    
    const pdfBuffer = Buffer.from(await response.arrayBuffer());
    
    console.log('Parsing PDF...');
    const pdfData = await pdfParse(pdfBuffer);
    
    console.log("PDF DATA", {
      pages: pdfData.numpages,
      textLength: pdfData.text.length
    });
    
    const textContent = pdfData.text;
    console.log("PDF TEXT PREVIEW", textContent.substring(0, 500));
    
    // Initialize OpenAI client with API key
    const openai = new OpenAI({
      apiKey: openaiApiKey
    });

    try {
      console.log('Generating summary with OpenAI...');
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "You are a legal document analyzer. Generate concise summaries focusing on key findings, important facts, and conclusions."
          },
          {
            role: "user",
            content: `Please analyze this legal document and generate a concise summary focusing on the main points, important facts, and conclusions. Format the summary in a clear, structured way.\n\n${textContent}`
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      if (!completion.choices[0]?.message?.content) {
        throw new Error('No summary generated by OpenAI');
      }

      const summary = completion.choices[0].message.content;
      console.log("PDF SUMMARY", summary);

      return NextResponse.json({
        summary,
        textContent,
        metadata: {
          pages: pdfData.numpages,
          textLength: textContent.length
        }
      });
    } catch (error: any) {
      console.error('OpenAI API Error:', error);
      const openAiErrorMessage = error.message || 'An unknown OpenAI API error occurred';
      throw new Error(`Failed to generate summary using OpenAI API: ${openAiErrorMessage}`);
    }
  } catch (error: any) {
    console.error("Error processing PDF:", error);
    const errorMessage = error.message || 'An unknown error occurred';
    return NextResponse.json({
      error: `Failed to process PDF: ${errorMessage}`,
      details: {
        code: error.code || 'UNKNOWN_ERROR',
        message: errorMessage,
        stack: error.stack || 'No stack trace available'
      }
    }, { status: 500 });
  }
}